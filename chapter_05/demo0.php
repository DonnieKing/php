<?php
/**
 * 常用的SQL语句
 * 在PHP中使用的SQL语句并不多,主要分为增删改查四类,也就是大家常说的CURD操作
 * C就是添加操作,U是更新操作,R是查询操作,D是删除操作
 * 这四种基本操作中,除了查询操作,是读操作之外,其余的,例如更新,添加,删除都是写操作
 * 读操作不会影响到数据库中的数据,而写操作是具有一定风险的,是对数据库的数据做出修改
 * 所以,在写操作了中,除了新增数据之外,对原有数据的任何改动,都必须基于条件查询
 * 绝对不允许无条件的更新或删除数据,这是一具原则,大家一定要牢记和遵守
 * 下面我们就简单的介绍一下这四类操作
 */

/**
 * 常用术语
 * 1. MySQL是一个关系型数据库管理系统
 * 2. 一个关系,其实就是一张数据表
 * 3. 数据库就是由一张张数据表组成的,可以将数据库理解为一个文件夹
 * 4. 一张数据表,直观上看就是一张二维表,由行和列组成
 * 5. 一行数据,我们称之为一条记录
 * 6. 一列数据,我称为一个字段
 * 7. 表中的数据是有类型的,这样我们才能确定他们的取值范围,以及可以进行的操作
 *      例如只有数值型的数据,进行加减乘除的算术运算才有意义
 * 8. 表中的数据类型主要分为三类: 数值型,字符型,日期时间型
 * 9. 在PHP脚本中,对于时间大多使用时间戳处理
 * 10. 时间戳是指从1970年1月1日0时起到现在的过去的秒数,用10位的十进制整数来表示
 * 11. 所以在表中,大多用10位的正整数的时间戳格式来表示时间,而不用系统的日期时间类型
 */

/**
 * 二个约定
 * 1. SQL语句中的关键字,应该始终坚持大写,如: SELECT, INSERT, UPDATE, DELETE
 * 2. SQL语句中的字段名,表名等,应该始终坚持使用反引号(``)包装,以防止与关键字冲突
 */



/**
 * 一. 添加操作
 * 1. 语法: INSERT INTO 表名 (字段列表) VALUES (值列表) ;
 * 2. 字段列表与值列表如果多于一个,则每个列表单元之间用逗号(,)进行分隔
 * 3. 字段列表与值列表之间必须是一一对应的
 * 4. 添加时,主键字段如何是自增的,可以忽略,如果写了主键字段,则必须赋值null
 * 5. INTO 关键字可以省略
 * 6. 为了防止重复添加数据,推荐使用 IGNORE 关键字,忽略重复数据
 * 7. 为了防止和MySQL中的关键字冲突,建议在字段名和表名使用反引号做为定界符,包装起来
 * 8. 每条SQL语句应该使用分号结束,不过,如果你没有添加,执行时系统也大多是会自动添加
 *
 * 举例:
 * 1.添加一条:
 * INSERT INTO `user` (`name`,`email`,`password`,`status`,`create_time`)
    VALUES ('陈近南','cjn@php.cn',sha1('123456'),1,1529890549);
 *
 * 2.添加多条: 只需要多次重复VALUES()部分即可,多个值之间用逗号分隔
 * INSERT INTO `user` (`name`,`email`,`password`,`status`,`create_time`)
    VALUES ('韦小宝','wxb@php.cn',sha1('123456'),1,1529890549),
           ('双儿','se@php.cn',sha1('123456'),1,1529890549);
 */


/********************************************************************************/

/**
 * 二、更新操作
 * 1. 语法: UPDATE 表名 SET 字段=新值 WHERE 查询条件
 * 2. 多个更新字段之间用逗号分开
 * 3. 更新操作是典型的写操作,而且还是对原有数据操作,是非常危险的,不仅要有更新条件,用户还得有更新权限才可以
 * 举例:
 * UPDATE `user` SET `email`='xln@qq.com' WHERE `name`='小龙女';
 * UPDATE `user` SET `email`='xln@qq.com',`status`=1 WHERE `name`='杨康';
 */

/********************************************************************************/

/**
 * 三、查询操作
 * 1. 语法: SELECT 字段列表 FROM 表名 WHERE 查询条件 GROUP BY 分组条件 ORDER BY 排序条件 LIMIT 数量
 * 2. 查询操作是我们日常工作使用最多的工作,也是风险最小的操作,理论上,对原始数据无任何影响
 * 3. 查询操作中应该始终养成对查询结果进行数量限制的好习惯,即添加 LIMIT 子句,防止结果集过大,当然已知结果集的情况除外
 * 4. SELECT 操作不仅可以查询数据,还可以使用函数,进行一些更加复杂的操作
 * 5. SELECT 是SQL语句中最复杂,也是最有意义的操作,以后在开发过程,遇到实例再详解
 * 6. 如果要查询全部字段,可以用'*'替代,但并不推荐这样做,最好显示的指出要查询的字段
 * 7. 字段名与表名,推荐坚持使用反引号
 *
 * 举例:
 * 1.查询最近添加的5个用户的id,姓名和邮箱
 *  SELECT `id`,`name`,`email` FROM `user` WHERE `status`=1  ORDER BY `create_time` DESC  LIMIT 5;
 *
 * 2.计算 15*20 将结果字段起个别名
 * SELECT 15*20 AS result;
 *
 * 3.字符串连接 concat_ws(分隔符,字符串...)
 * SELECT concat(`id`,`name`) FROM `user` WHERE `status`=1 LIMIT 5;
 * 可以指定字段之间的分隔符
 * SELECT concat_ws(' : ',`id`,`name`) FROM `user` WHERE `status`=1 LIMIT 5;
 *
 * //4.获取记录数量
 * 1. 获取全部记录数量
 * SELECT COUNT(*) AS res FROM `user`;
 * 2.可以设置查询条件,则返回满足条件的记录数量,注意,不受LIMIT的影响
 * SELECT COUNT(*) AS res FROM `user` WHERE `id` > 5
 */

/********************************************************************************/


/**
 * 四、删除操作
 * 1. 语法: DELETE FROM 表名 WHERE 删除条件
 * 2. 删除也是一项非常有风险的写操作,也更新一样,必须是基于查询的,换句话说,就是不允许无条件的进行删除数据
 * 3. 数据删除之后是无法恢复的,是真正意义的物理删除
 * 4. 开发过程中,大多是利用更新操作,来设置一个删除标志字段,来模拟删除,即软删除技术,只有清理的时候才物理删除,即安全,又提高了效率
 *
 * 举例:
 * 删除id=9的记录
 * DELETE FROM `user` WHERE `id`=9
 */




/********************************************************************************/


/**
 * 如何重排主键
 * 如果表中数据要保留:
 * 1. 删除原表中的主键: ALTER  TABLE  `user` DROP `id`;
 * 2. 重新添加主键,设置如下属性: 不为空, 自增, 第一个
    ALTER  TABLE  `user` ADD `id` mediumint(5) PRIMARY KEY NOT NULL AUTO_INCREMENT FIRST;
 *
 *
 * 如果表中数据已备份,或者不重要可以删除,则更简单
 * truncate table `user`
 * 自动清空数据,并将主键重置
 */












